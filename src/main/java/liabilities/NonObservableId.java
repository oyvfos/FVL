package liabilities;

import java.io.Serializable;

import org.joda.beans.ImmutableBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import com.opengamma.strata.data.MarketDataName;
import com.opengamma.strata.data.NamedMarketDataId;
import com.opengamma.strata.data.ObservableSource;
import com.opengamma.strata.market.curve.CurveGroupName;
import com.opengamma.strata.market.curve.CurveId;
import com.opengamma.strata.market.curve.CurveName;

import examples.Setup.ParamaterName;
import java.lang.invoke.MethodHandles;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.TypedMetaBean;
import org.joda.beans.impl.light.LightMetaBean;
@BeanDefinition(style = "light", cacheHashCode = true)
public final class  NonObservableId implements NamedMarketDataId<Double>, ImmutableBean, Serializable {
    @PropertyDefinition(validate = "notNull")
    private final ParamaterName parName;
    
    public static NonObservableId of(String parName) {
        return new NonObservableId(ParamaterName.of(parName));
      }
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code NonObservableId}.
     */
    private static final TypedMetaBean<NonObservableId> META_BEAN =
            LightMetaBean.of(
                    NonObservableId.class,
                    MethodHandles.lookup(),
                    new String[] {
                            "parName"},
                    new Object[0]);

    /**
     * The meta-bean for {@code NonObservableId}.
     * @return the meta-bean, not null
     */
    public static TypedMetaBean<NonObservableId> meta() {
        return META_BEAN;
    }

    static {
        MetaBean.register(META_BEAN);
    }

    /**
     * The serialization version id.
     */
    private static final long serialVersionUID = 1L;

    /**
     * The cached hash code, using the racy single-check idiom.
     */
    private transient int cacheHashCode;

    private NonObservableId(
            ParamaterName parName) {
        JodaBeanUtils.notNull(parName, "parName");
        this.parName = parName;
    }

    @Override
    public TypedMetaBean<NonObservableId> metaBean() {
        return META_BEAN;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the parName.
     * @return the value of the property, not null
     */
    public ParamaterName getParName() {
        return parName;
    }

    //-----------------------------------------------------------------------
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            NonObservableId other = (NonObservableId) obj;
            return JodaBeanUtils.equal(parName, other.parName);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = cacheHashCode;
        if (hash == 0) {
            hash = getClass().hashCode();
            hash = hash * 31 + JodaBeanUtils.hashCode(parName);
            cacheHashCode = hash;
        }
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("NonObservableId{");
        buf.append("parName").append('=').append(JodaBeanUtils.toString(parName));
        buf.append('}');
        return buf.toString();
    }

	@Override
	public Class<Double> getMarketDataType() {
		// TODO Auto-generated method stub
		return Double.class;
	}

	@Override
	public MarketDataName<Double> getMarketDataName() {
		// TODO Auto-generated method stub
		return parName;
	}

    //-------------------------- AUTOGENERATED END --------------------------
}
